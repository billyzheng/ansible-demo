---
- name: Create server maintenance task and schedule
  hosts: localhost
  gather_facts: true
  tasks:
  - name: Extract and set downtime variables from SN
    ansible.builtin.set_fact:
      cpu_mem_downtime_end: "{{ variables.downtime_windows_end }}"
      cpu_mem_downtime_start: "{{ variables.downtime_windows_start }}"     
         
  - name: Calculate SL maintenance duration for CPU or MEM
    block:
      - name: Calculate the difference in seconds
        set_fact:
          seconds_diff: "{{ ((cpu_mem_downtime_end | to_datetime('%Y-%m-%d %H:%M:%S') - cpu_mem_downtime_start | to_datetime('%Y-%m-%d %H:%M:%S')).total_seconds()) | float }}"

      - name: Convert seconds difference to minutes
        set_fact:
          minutes_duration: "{{ (seconds_diff | float / 60) | int }}"
    when: variables.select_date_and_time is defined and variables.select_date_and_time == "Future Date"

  # - name: Calculate SL maintenance duration for Reboot
  #   block:
  #     - name: Calculate the difference in seconds
  #       set_fact:
  #         seconds_diff: "{{ ((variables.End_Date | to_datetime('%Y-%m-%d %H:%M:%S') - variables.Start_Date | to_datetime('%Y-%m-%d %H:%M:%S')).total_seconds()) | float }}"

  #     - name: Convert seconds difference to minutes
  #       set_fact:
  #         minutes_duration: "{{ (seconds_diff | float / 60) | int }}"
  #   when: variables.please_select_server_reboot_time is defined and variables.please_select_server_reboot_time == "Future Date"  

  # - name: Get current time in UTC to calculate the total downtime for Server Shutdown
  #   ansible.builtin.set_fact:
  #     current_time_utc: "{{ now(utc=true, fmt='%Y-%m-%d %H:%M:%S') }}"
  #   when: variables.please_select_server_shutdown_time is defined 

  # - name: Calculate SL maintenance duration for Shutdown
  #   block:
  #     - name: Ensure shutdown_period has a time component
  #       set_fact:
  #         shutdown_period_with_time: "{{ variables.shutdown_period + ' 00:00:00' }}"

  #     - name: Calculate the difference in seconds
  #       set_fact:
  #         seconds_diff: "{{ ((shutdown_period_with_time | to_datetime('%Y-%m-%d %H:%M:%S') - current_time_utc | to_datetime('%Y-%m-%d %H:%M:%S')).total_seconds()) | float }}"
      
  # - name: Convert seconds difference to minutes
  #       set_fact:
  #         minutes_duration: "{{ (seconds_diff | float / 60) | int }}"
  #   when: variables.please_select_server_shutdown_time is defined 

  # - name: Set SL minutes duration to 30 when reboot, CPU and MEM task performed immediately
  #   set_fact:
  #       minutes_duration: 30
  #   when: (variables.please_select_server_reboot_time | default('') == "Immediately") or (variables.select_date_and_time | default('') == "Immediately")
    
  - name: Get current time in UTC for calculating down time start
    ansible.builtin.set_fact:
      epoch_unix_time: "{{ ansible_date_time.epoch }}"
 
  - name: Login into SL to get list of Server Device ID's
    ansible.builtin.uri:
      url: "{{ SL1_HOSTNAME }}api/device?limit=10000"
      method: GET
      return_content: yes
      status_code: 200
      headers:
        Content-Type: "application/xml"
      body_format: form-urlencoded
      user: "{{ SL1_USERNAME }}"
      password: "{{ SL1_PASSWORD }}"
    register: api_response

  - ansible.builtin.debug: var=api_response

  - name: Filter the device API for server "{{ VM_servername }}"
    ansible.builtin.set_fact:
      server_api: "{{ item.URI }}"
    loop: "{{ api_response.json.result_set }}"
    when: item.description == VM_servername

  - name: Create the Maintenance Task for the Server "{{ VM_servername }}"
    ansible.builtin.uri:
      url: "{{ SL1_HOSTNAME }}api/task/"
      method: POST
      body_format: json
      body:
        name: "Ansible Task Creation"
        description: "Ansible Creating Task ID"
        enabled: 1
        details:
          active: 12
          patch_window: 0
        last_run: "0"
        owner: "/api/account/77"
        organization: "/api/organization/0"
        visibility: "Organization"
        aligned_resource: "{{ server_api }}"
      status_code: 201
      headers:
        Content-Type: "application/json"
      user: "{{ SL1_USERNAME }}"
      password: "{{ SL1_PASSWORD }}"
    register: task_response

  - name: Extract task ID
    ansible.builtin.set_fact:
       task_id_str: "{{ task_response.json.schedules.URI | regex_search('task/([0-9]+)', '\\1') }}"
       
  - name: Convert task ID to string and remove brackets
    ansible.builtin.set_fact:
      task_id: "{{ task_id_str[0] }}"

  - ansible.builtin.set_stats:
      data:
        tasks_id: "{{ task_id }}"

  - name: Create Maintenance Schedule for the Server "{{ VM_servername }}"
    ansible.builtin.uri:
      url: "{{ SL1_HOSTNAME }}api/schedule"
      method: POST
      body_format: json
      body:
        dtstart: "{{ epoch_unix_time }}"
        timezone: "548"
        duration: "{{ minutes_duration }}"
        description: "Ansible Schedule Creation"
        recur_expr: "0"
        recur_unit: null
        recur_until: "0"
        owner: "/api/account/77"
        organization: "/api/organization/0"
        visibility: "Organization"
        in_window: "0"
        preserve_in_db: "0"
        ppguid: null
        schedule_guid: null
        tasks:
          - "{{ task_id }}"
      status_code: 201
      headers:
        Content-Type: "application/json"
      user: "{{ SL1_USERNAME }}"
      password: "{{ SL1_PASSWORD }}"
    register: schedule_response
  
  - ansible.builtin.debug: var=schedule_response

  - name: Get schedule guid
    ansible.builtin.set_fact:
        scheduling_guid: "{{ schedule_response.json.schedule_guid }}"
        
  - name: Extract schedule ID
    ansible.builtin.set_fact:
       schedule_id_str: "{{ schedule_response.json.tasks.URI | regex_search('schedule/([0-9]+)', '\\1') }}" 
       
  - name: Filter the exact schedule ID number
    ansible.builtin.set_fact:
      schedule_id: "{{ schedule_id_str[0] }}"

  - ansible.builtin.set_stats:
      data:
        scheduling_id: "{{ schedule_id }}"

  - name: Link Task with Schedule for the Server "{{ VM_servername }}"
    ansible.builtin.uri:
      url: https://test.monitoring.abb.com/api/schedule/{{ schedule_id }}
      method: PUT
      body_format: json
      body:
        dtstart: "{{ epoch_unix_time }}"
        timezone: "548"
        duration: "{{ minutes_duration }}"
        description: "Ansible Creates and Enable the Maintenance Schedule"
        recur_expr: "0"
        recur_unit: null
        recur_until: "0"
        owner: "/api/account/77"
        organization: "/api/organization/0"
        visibility: "Organization"
        in_window: "0"
        preserve_in_db: "0"
        ppguid: null
        schedule_guid: "{{ scheduling_guid }}"
        tasks:
          - "{{ task_id }}"
      status_code: 200
      headers:
        Content-Type: "application/json"
      user: "{{ SL1_USERNAME }}"
      password: "{{ SL1_PASSWORD }}"
    register: server_scheduled
