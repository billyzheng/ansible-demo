---
- name: Reboot using SNOW variable
  hosts: localhost
  gather_facts: no
  tasks:

    - name: Get the VM inventory - before changes
      register: pre_result
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
        - "{{ variables.server }}"

    - name: Gather one specific VM
      community.vmware.vmware_vm_info:
         vm_name: "{{ variables.server }}"
      register: vm_info

    - debug: var=vm_info
        
    - name: Filter datacenter value
      set_fact:
        datacenter_value: "{{ vm_info.virtual_machines[0].datacenter }}"
       
    - name: Gather some info from a guest using the vSphere API output schema
      community.vmware.vmware_guest_info:
        name: "{{ variables.server }}"
        datacenter: "{{ datacenter_value }}"
        schema: "vsphere"
        properties: ["summary.runtime.bootTime"]
      register: time_before_boot

    - debug: var=time_before_boot

    - name: Set last boot time fact
      set_fact:
        last_boot_time: "{{ time_before_boot.instance.summary.runtime.bootTime }}"
       
    - name: Reboot the virtual machine
      community.vmware.vmware_guest_powerstate:
         name: "{{ variables.server }}"
         state: reboot-guest
      register: reboot_result

    - name: Fail if VM reboot is not happen
      fail:
        msg: "VM is already in shutdown state, Please check the reason manually"
      when: not reboot_result.changed

    - name: wait for task complete
      ansible.builtin.wait_for:
         timeout: 30

    - name: Wait until my VM is ready
      vmware.vmware_rest.vcenter_vm_tools_info:
        vm: '{{ pre_result.value[0].vm }}'
      register: vm_tools_info
      until:
      - vm_tools_info is not failed
      - vm_tools_info.value.run_state == "RUNNING"
      retries: 60
      delay: 5

    - name: Gather some info from a guest using the vSphere API output schema
      community.vmware.vmware_guest_info:
        name: "{{ variables.server }}"
        datacenter: "{{ datacenter_value }}"
        schema: "vsphere"
        properties: ["summary.runtime.bootTime"]
      register: time_after_boot

    - debug: var=time_after_boot

    - name: Set last boot time fact
      set_fact:
        final_boot_time: "{{ time_after_boot.instance.summary.runtime.bootTime }}"
    
    - name: Get the VM inventory - post changes
      register: post_result
      vmware.vmware_rest.vcenter_vm_info:
        filter_names:
        - "{{ variables.server }}"
      
    - name: Set Post VM Status
      set_fact:
        post_server_state: "{{ post_result.value[0].power_state }}"
        
    - set_stats:
        data:
          time_before_reboot: "{{ last_boot_time }}"
          time_after_reboot: "{{ final_boot_time }}"
          vm_power_state: "{{ post_server_state }}" 
      
    
