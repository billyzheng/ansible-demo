#Output file variables
Function write-log{
Param (
[string] $msg
)
$date = Get-Date -Format "MM-dd-yyyy"
New-Item -Path "C:\Programdata\Logs" -ItemType Directory -ErrorAction SilentlyContinue
$Logfile = "C:\Programdata\Logs\Post-Build_Script2.log"
$TimeStamp = Get-Date -Format "MM/dd/yyyy hh:mm:ss tt"
write-host "$($TimeStamp): $msg"
Write-Output "$($TimeStamp): $msg" |out-file $Logfile -append
}

Import-Csv "C:\temp\$env:computername.csv" -UseCulture| %{
$DNSSuffix = ($_.DNSSuffix).split(",")
}

#Setting up timezone
$timezoneValue = "{{ input_timezone }}"
$TZ = Get-TimeZone
if ($TZ.Id -ne $timezoneValue) {
    Set-TimeZone -Name $timezoneValue
    Write-Host "Timezone set to $timezoneValue"
} else {
    Write-Host "Timezone already set to $timezoneValue"
}

#Change the CD drive letter
try {
    $CDDrive = Get-WmiObject win32_volume -Filter 'DriveType = "5"'

    if ($CDDrive) {
        $CDDrive.DriveLetter = "Z:"
        $CDDrive.put()
        Write-Host "CD drive letter changed to Z"
        Write-Log "CD drive letter changed to Z"
    } else {
        Write-Host "No CD drive found"
        Write-Log "No CD drive found"
    }
} catch {
    Write-Host "An error occurred: $_"
    Write-Log "An error occurred: $_"
}

#Expand C drive
try {
    $CDL = "C"
    $CSize = (Get-PartitionSupportedSize -DriveLetter $CDL)
    Resize-Partition -DriveLetter $CDL -Size $CSize.SizeMax
    Write-Host "C drive expanded successfully"
} catch {
    Write-Host "Error: $_"
}

#Formatting available disks
Function Partition-disk
{
 $newdisks = get-disk |where partitionstyle -eq 'raw'
 If ($newdisks -ne $null)
 {
   foreach($newdisk in $newdisks)
  {
    $dl= get-Disk -number $newdisk.Number | Initialize-Disk -PartitionStyle GPT -PassThru |  New-Partition -AssignDriveLetter -UseMaximumSize
    Format-Volume  -driveletter $dl.driveletter -FileSystem NTFS  -Confirm:$false
	write-log "Disk $newdisk.number partitioned, formatted and assigned the drive letter as $dl.driveletter"
  }
 }
 else
 {
  write-log "No raw disks found"
 }
}

Partition-disk

#KMS registration (OS License)
$ActivationStatus = Get-CimInstance SoftwareLicensingProduct -Filter "Name like 'Windows%'" | Where-Object { $_.PartialProductKey } | Select-Object LicenseStatus       
$LicenseResult = switch($ActivationStatus.LicenseStatus){
          0	{"Unlicensed"}
          1	{"Licensed"}
          2	{"OOBGrace"}
          3	{"OOTGrace"}
          4	{"NonGenuineGrace"}
          5	{"Not Activated"}
          6	{"ExtendedGrace"}
          default {"unknown"}
        }
if ($LicenseResult -ne "Licensed")
{
cscript "C:\windows\system32\slmgr.vbs" -skms 'it-s-kms0001.it.abb.com:1688'
Start-Sleep 15
cscript "C:\windows\system32\slmgr.vbs" -ato
Start-Sleep 30
write-log "OS License activated successfully"
}
else
{
 write-log "OS License already activated"	
}

#Enabling RDP access
Set-ItemProperty -path 'HKLM:\SYSTEM\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0
write-log "RDP access enabled"

#Disabling firewall
Set-NetFirewallProfile -profile Domain,Public,Private -Enabled False
write-log "Firewall Disabled"

#Flex net Agent Installation -
write-log "Flex net agent installation starting"
Invoke-Item -Path "{{ flex_install_pth }}"
Start-Sleep 30
write-log "Flex net agent Install command invoked"

$FNApath1 = "{{mgspolicy_pth }}"
$FNApath2 = "{{ndtrack_pth }}"

if ((Test-Path -Path $FNApath1 -PathType Leaf) -and (Test-Path -Path $FNApath2 -PathType Leaf))
{
write-log "Flexnet policy and tracker files are available and continuing the installation"
Start-Process -FilePath $FNApath1 -ArgumentList "-t Machine -o userinteractionlevel=quiet" -Wait
Start-Process -FilePath $FNApath2 -ArgumentList "-t Machine -o userinteractionlevel=quiet" -Wait
}

# Qualys Agent Installation
Write-Log "Qualys agent installation starting"
$QA = "{{ qa_pth }}"
$customerId = "{{ cust_id }}"
$activationId = "{{ activate_id }}"
$webServiceUri = "{{ webservice_uri }}"

Start-Process -FilePath $QA -ArgumentList "CustomerId=$customerId ActivationId=$activationId WebServiceUri=$webServiceUri" -Wait
Write-Log "Qualys agent installation completed"

#Defender onboarding
write-log "Onboarding Defender started"
$DF= "{{ df_script_pth }}"
Start-Process $DF
start-sleep -Seconds 60
write-log "Onboarding Defender completed"

#DNS suffix validation
$suffixresult = (Get-DnsClientGlobalSetting).SuffixSearchList
for ($i=0; $i -lt $DNSSuffix.count; $i++)
{
if ($dnssuffix[$i] -eq $suffixresult[$i])
{
$a =$suffixresult[$i]
write-log "DnS suffix value $a is correct"
}
else
{
Set-DnsClientGlobalSetting -SuffixSearchList $DNSSuffix
}
}
write-log (Get-DnsClientGlobalSetting).SuffixSearchList

# SPLUNK AGENT INSTALLATION
write-log "Splunk agent installation starting"
$splunk_path = "{{ splunk_path }}"
$splunk_install = "{{ splunk_install }}"
$splunk = "/i $splunk_install AGREETOLICENSE=Yes SERVICESTARTTYPE=auto SPLUNKPASSWORD={{ splunk_passwd }} /quiet"
Start-Process "msiexec.exe" -ArgumentList $splunk -wait -NoNewWindow
write-log "Splunk agent installation completed"
